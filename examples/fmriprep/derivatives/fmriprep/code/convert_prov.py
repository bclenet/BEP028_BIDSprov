#!/usr/bin/python
# coding: utf-8

""" Convert nipype provenance traces into one BIDS-Prov compliant JSON-LD graph """

import json
from pyld import jsonld
from rdflib import Dataset, Graph, Namespace
from rdflib.namespace import RDF, RDFS, PROV
from rdflib.plugins.sparql import prepareQuery

# Dict of namespaces to be used in queries
NAMESPACES = {
    'rdfs': RDFS,
    'rdf': RDF,
    'prov': PROV,
    'nipype': Namespace("http://nipy.org/nipype/terms/"),
    'niiri': Namespace("http://iri.nidash.org/"),
    'crypto': Namespace("http://id.loc.gov/vocabulary/preservation/cryptographicHashFunctions/"),
    'bidsprov': Namespace("https://github.com/bids-standard/BEP028_BIDSprov/terms/")
}

# Parse the nipype RDF provenance file
# We use Dataset as there might be several graphs in the file
nipype_prov = Dataset()
nipype_prov.parse('prov/workflow_provenance_20250314T155959.trig', format='trig')

# Create an empty graph for output provenance
bids_prov = Graph()

# Create a list of queries to extract data from the input file
query_labels = [
    '1. Extract output file entities',
    '2. Extract input file entities',
    '3. Extract activities',
    '4. Extract agents',
    '5. Extract environments'
]
queries = [
    # 1. Extract output file entities
    """
    CONSTRUCT {
        ?s rdfs:label ?label .
        ?s prov:atLocation ?atlocation .
        ?s prov:wasGeneratedBy ?act .
        ?s rdf:type ?type .
        }
    WHERE {
        ?s ?p ?o .
        ?s prov:qualifiedGeneration ?gen . # entity has a qualified generation
        ?gen prov:activity ?act . # this qualified generation has an activity
        ?act nipype:command ?x . # this activity has a command (disables activities representing nipype interfaces)
        ?s prov:value ?label .
        ?s prov:atLocation ?atlocation .
        ?s rdf:type prov:Entity .
        ?s rdf:type ?type .
        ?s crypto:sha512 ?sha .
        BIND(STR(?label) as ?label)
        BIND(STR(?atlocation) as ?atlocation)
    }
    """,
    # 2. Extract input file entities
    """
    CONSTRUCT {
        ?s rdfs:label ?label .
        ?s prov:atLocation ?atlocation .
        ?s rdf:type prov:Entity .
        ?s bidsprov:Digest ?sha .
        }
    WHERE {
        ?s ?p ?o .
        ?collection prov:hadMember ?s .
        ?collection rdf:type nipype:Inputs .
        ?s prov:value ?label .
        ?s prov:atLocation ?atlocation .
        ?s rdf:type prov:Entity .
        ?s crypto:sha512 ?sha .
        FILTER NOT EXISTS { ?s prov:wasGeneratedBy ?x . } # Entity was not generated by anything
        BIND(STR(?label) as ?label)
        BIND(STR(?atlocation) as ?atlocation)
        BIND(CONCAT("sha512:", STR(?sha)) as ?sha)
    }
    """,
    # 3. Extract activities
    """
    CONSTRUCT {
        ?s rdfs:label ?label .
        ?s rdf:type prov:Activity .
        ?s bidsprov:Command ?command . # we select activities with commands only (disables activities representing nipype interfaces)
        ?s prov:wasAssociatedWith ?associated .
        # ?s prov:used ?used . # comment this line to remove prov:used environments
        ?s prov:used ?usedent .
        ?s prov:startedAtTime ?started .
        ?s prov:endedAtTime ?ended .
        }
    WHERE {
        ?s ?p ?o .
        ?s rdfs:label ?label .
        ?s rdf:type prov:Activity .
        ?s nipype:command ?command .
        ?s prov:wasAssociatedWith ?associated .
        ?s prov:used ?used .
        ?s prov:startedAtTime ?started .
        ?s prov:endedAtTime ?ended .
        ?s prov:qualifiedUsage ?qu .
        ?qu prov:entity ?usedent .
        ?usedent prov:atLocation ?x .
        BIND(STR(?label) as ?label)
        BIND(STR(?command) as ?command)
    }
    """,
    # 4. Extract agents
    """
    CONSTRUCT {
        ?s rdfs:label ?label .
        ?s rdf:type prov:Agent .
        ?s bidsprov:Version ?version .
        }
    WHERE {
        ?s ?p ?o .
        ?s rdfs:label ?label .
        ?s rdf:type prov:SoftwareAgent .
        ?s nipype:version ?version .
        BIND(STR(?label) as ?label)
        BIND(STR(?version) as ?version)
    }
    """,
    # 5. Extract environments
    """
    CONSTRUCT {
        ?s rdfs:label ?label .
        ?s rdf:type bidsprov:Environment .
        ?s bidsprov:EnvVar ?envvar .
        ?envvar rdfs:label ?envvarkey .
        ?envvar prov:value ?envvarval .
        }
    WHERE {
        ?s ?p ?o .
        ?s rdfs:label ?label .
        ?s rdf:type nipype:Environment .
        ?envvar a prov:Entity .
        ?envvar nipype:environmentVariable ?envvarkey .
        ?envvar prov:value ?envvarval .
        ?s prov:hadMember ?envvar .
        BIND(STR(?label) as ?label)
        BIND(STR(?envvarkey) as ?envvarkey)
        BIND(STR(?envvarval) as ?envvarval)
    }
    """
    ]

# Query input graph
for label, query in zip(query_labels, queries):
    print(label)
    if 'environments' not in label:
        q = prepareQuery(query, initNs = NAMESPACES)
        for graph in nipype_prov.graphs():
            queried_graph = graph.query(q)
            if len(queried_graph) > 0:
                bids_prov += queried_graph

# Serialize output graph to JSON-LD and compact
compacted = jsonld.compact(
    json.loads(bids_prov.serialize(format='json-ld')),
    'https://raw.githubusercontent.com/bids-standard/BEP028_BIDSprov/master/context.json'
    )

# Write compacted JSON-LD
with open('prov/workflow_provenance_20250314T155959_compacted.jsonld', 'w', encoding='utf-8') as file:
    file.write(json.dumps(compacted, indent=2))

# Merge records into a BIDS-Prov skeleton
bids_prov_skeleton = {
  "@context": "https://raw.githubusercontent.com/bids-standard/BEP028_BIDSprov/master/context.json",
  "BIDSProvVersion": "0.0.1",
  "Records": {
    "Software": [],
    "Activities": [],
    "Entities": [],
    "Environments": []
  }
}
for record in compacted['@graph']:
    if 'Type' not in record:
        continue
    if record['Type'] == 'Software':
        bids_prov_skeleton['Records']['Software'].append(record)
    elif record['Type'] == 'Activities':
        bids_prov_skeleton['Records']['Activities'].append(record)
    elif 'Environment' in record['Type']:
        bids_prov_skeleton['Records']['Environments'].append(record)
    else:
        bids_prov_skeleton['Records']['Entities'].append(record)

# Write BIDS-Prov JSON-LD
with open('prov/workflow_provenance_20250314T155959_bidsprov.jsonld', 'w', encoding='utf-8') as file:
    file.write(json.dumps(bids_prov_skeleton, indent=2))
